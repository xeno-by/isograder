#!/usr/bin/env python
# coding=utf-8
import os, sys, logging, inspect, traceback, re

def message_unexpected_failure(explanation):
  return "unexpected failure in isograder:" + "\n" + str(explanation)
def message_bad_python_version(actual):
  return "need python 2.7, you have " + str(actual)
def message_bad_command_line(explanation):
  return str(explanation) + "\n" + "usage: " + sys.argv[0] + " [-v]"
def message_expected_error(error):
  is_useful_position = error.ctx.position - 1 < len(error.ctx.initial_lines)
  if is_useful_position: return "error parsing the correction sheet:" + "\n" + str(error) + "\n" + str(error.ctx.initial_lines[error.ctx.position - 1]) + "\n" + "^"
  else: return "error parsing the correction sheet:" + "\n" + str(error.msg)
def message_unexpected_eof(what):
  return "unexpected end of file when parsing " + what
def message_only_blanks_and_sections_at_top_level():
  return "at the top level of a correction sheet, only blank lines and section lines are allowed"
def message_no_sections_at_top_level():
  return "a top-level section is required in a correction sheet"
def message_multiple_sections_at_top_level():
  return "only one top-level section is allowed in a correction sheet"
def message_invalid_section_level(level, actual):
  return "invalid section level: expected " + level + ", actual " + ("*" * actual)
def message_invalid_section_header(level, actual):
  return "invalid section header format: expected \"" + ("*" * level) + " <name> [/<max_grade>]\""
def message_invalid_section_grade(expected, actual):
  return "invalid section grade: expected (i.e. specified) " + str(expected) + ", actual (i.e. computed) " + str(actual)
def message_invalid_section_max_grade(expected, actual):
  return "invalid section max grade: expected (i.e. specified) " + str(expected) + ", actual (i.e. sum of all subsection max grades) " + str(actual)
def message_invalid_line():
  first_line = "invalid line: should either start with * (section) or start with -/+ (correction) or end with - (header)"
  second_line = "NOTE: by the way, multi-line explanations for corrections are not supported"
  return first_line + "\n" + second_line
def message_invalid_correction(actual):
  return "invalid correction format: expected \"[-|+]<number>: <explanation>\""

logFormatter = logging.Formatter("%(message)s")
rootLogger = logging.getLogger()
rootLogger.setLevel(logging.CRITICAL)
logRoot = os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe())))
fileHandler = logging.FileHandler("{0}/isograder.log".format(logRoot))
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)
logger = logging.getLogger("isocollect")

def fail_bad_python_version(): logger.critical(message_bad_python_version(sys.version_info)); exit(1)
if sys.version_info < (2, 7) or (2, 8) <= sys.version_info: fail_bad_python_version()

def custom_except_hook(exctype, value, tb):
  logger.critical(message_unexpected_failure("\n".join(traceback.format_exception(exctype, value, tb))))
  logger.info("Isograder terminating with an unexpected error...")
  exit(1)
sys.excepthook = custom_except_hook

def fail_bad_command_line(explanation): logger.critical(message_bad_command_line(explanation)); exit(1)
flags = filter(lambda arg: arg.startswith("-"), sys.argv[1:])
other = filter(lambda arg: not arg.startswith("-"), sys.argv[1:])
for flag in filter(lambda flag: flag != "-v", flags): fail_bad_command_line("unrecognized flag: " + flag)
for other in other: fail_bad_command_line("unrecognized argument: " + other)
verbose = "-v" in flags
if verbose: logFormatter = logging.Formatter("%(asctime)-15s [%(levelname)s] %(message)s")
if verbose: rootLogger.setLevel(logging.INFO)
logger.info("Isograder starting up...")

# parsing infrastructure:
#  1) context that stores positions, remaining lines, etc
#  2) parse result ADT that contains status of a parse operation + an updated context
class Context(object):
  def __init__(self, initial_lines, lines, position, level):
    self.initial_lines = initial_lines
    self.lines = lines
    self.position = position
    self.level = level
  def __str__(self):
    return "{ position = " + str(self.position) + ", level = " + str(self.level) + " }"
  def next_line(self):
    return Context(self.initial_lines, self.lines[1:], self.position + 1, self.level)
  def prev_level(self):
    return Context(self.initial_lines, self.lines, self.position, self.level - 1)
  def next_level(self):
    return Context(self.initial_lines, self.lines, self.position, self.level + 1)
class Success(object):
  def __init__(self, ctx, tree):
    self.ctx = ctx
    self.tree = tree
  def __str__(self):
    return "line " + str(self.ctx.position) + ": " + str(self.msg) + " with \n" + str(self.tree)
class Error(object):
  def __init__(self, ctx, msg):
    self.ctx = ctx
    self.msg = msg
  def __str__(self):
    return "line " + str(self.ctx.position) + ": " + str(self.msg)

# abstracts over the particulars of the parsing logic allowing to encapsulate cross-cutting concerns
def parser(target):
  def decorator(meth):
    def wrapped(ctx):
      details = "with " + str(ctx) + " at " + (ctx.lines[0] if ctx.lines else "[]")
      logger.info("started parsing " + target + " " + details)
      try: return meth(ctx)
      finally: logger.info("finished parsing " + target + " " + details)
    return staticmethod(wrapped)
  return decorator

# correction sheet AST
# NOTE: currently we lose formatting details that are insignificant to semantics
# NOTE: this has an upside of ensuring canonical formatting, but also has a downside of complicating the diffs
class Sheet(object):
  def __init__(self, ctx, parts):
    self.ctx = ctx
    self.parts = parts
  def __str__(self):
    return "\n".join(map(lambda part: str(part), self.parts))
  def fill(self):
    return Sheet(self.ctx, map(lambda part: part.fill(), self.parts))
  @parser("Sheet")
  def parse(ctx):
    assert ctx.position == 1 and ctx.level == 0
    initial_ctx = ctx
    parts = []
    while True:
      if ctx.lines:
        result = Part.parse(ctx)
        if isinstance(result, Error):
          return result
        elif isinstance(result, Success):
          part = result.tree
          if isinstance(part, Blank):
            parts.append(part)
            ctx = result.ctx
            continue
          elif isinstance(part, Section):
            if len(filter(lambda part: isinstance(part, Section), parts)) != 0:
              return Error(ctx, message_multiple_sections_at_top_level())
            else:
              parts.append(part)
              ctx = result.ctx
              continue
          else:
            return Error(ctx, message_only_blanks_and_sections_at_top_level())
        else:
          assert False, "unexpected parse result of type " + str(type(result))
      else:
        break
    if len(filter(lambda part: isinstance(part, Section), parts)) != 0: return Success(ctx, Sheet(initial_ctx, parts))
    else: return Error(ctx, message_no_sections_at_top_level())
class Part(object):
  @parser("Part")
  def parse(ctx):
    if ctx.lines:
      line = ctx.lines[0].strip()
      if line == "": return Blank.parse(ctx)
      elif line.startswith("*"): return Section.parse(ctx)
      elif line.startswith("-") or line.startswith("+"): return Correction.parse(ctx)
      else: return Header.parse(ctx)
    else:
      return Error(ctx, message_unexpected_eof("Part"))
class Blank(Part):
  def __init__(self, ctx, str):
    self.ctx = ctx
    self.str = str
  def __str__(self):
    return str(self.str)
  def fill(self):
    return self
  @parser("Blank")
  def parse(ctx):
    if ctx.lines:
      line = ctx.lines[0].strip()
      assert line == ""
      return Success(ctx.next_line(), Blank(ctx, line))
    else:
      return Error(ctx, message_unexpected_eof("Blank"))
class Section(Part):
  def __init__(self, ctx, level, name, grade, max_grade, parts):
    self.ctx = ctx
    self.level = level
    self.name = name
    self.grade = grade
    self.max_grade = max_grade
    self.parts = parts
  def __str__(self):
    header = "*" * self.level +  " " + str(self.name) + " [" + (str(self.grade) if self.grade is not None else "") + "/" + str(self.max_grade) + "]"
    body = "\n" + "\n".join(map(lambda part: str(part), self.parts)) if self.parts else ""
    return header + body
  def fill(self):
    filled_parts = map(lambda part: part.fill(), self.parts)
    def accumulated_points():
      filled_subsections = filter(lambda filled_part: isinstance(filled_part, Section), filled_parts)
      accumulated_points = 0
      for filled_subsection in filled_subsections: accumulated_points += filled_subsection.grade
      if not filled_subsections: accumulated_points = self.max_grade
      return accumulated_points
    def accumulated_penalty():
      filled_corrections = filter(lambda filled_part: isinstance(filled_part, Correction), filled_parts)
      accumulated_penalty = 0
      for filled_correction in filled_corrections: accumulated_penalty += filled_correction.penalty
      return accumulated_penalty
    def resulting_grade():
      grade = accumulated_points() - accumulated_penalty()
      if grade < 0: grade = 0
      if grade > self.max_grade: grade = self.max_grade
      return grade
    if self.grade is not None and self.grade != resulting_grade():
      error = Error(self.ctx, message_invalid_section_grade(self.grade, resulting_grade()))
      logger.critical(message_expected_error(error))
      logger.info("Isograder terminating with a grade error...")
      sys.exit(1)
    return Section(self.ctx, self.level, self.name, resulting_grade(), self.max_grade, filled_parts)
  @parser("Section")
  def parse(ctx):
    initial_ctx = ctx
    if ctx.lines:
      line = ctx.lines[0].strip()
      assert line.startswith("*")
      expected_level = ctx.level + 1
      actual_level = len(re.match("^(\*+).*$", line).groups()[0])
      if expected_level == actual_level:
        level = actual_level
        rest = line[level:]
        m = re.match("^(.*)\[(\d+)?/(\d+)\]$", rest)
        logger.info("matching " + line)
        logger.info("match result: " + str(m.groups() if m else None))
        if m:
          name = m.groups()[0].strip()
          grade = int(m.groups()[1]) if m.groups()[1] is not None else None
          max_grade = int(m.groups()[2])
          ctx = ctx.next_line()
          parts = []
          while True:
            if ctx.lines:
              line = ctx.lines[0]
              # need to allow `* Section\n** Subsection`, but stop at `* Section 1\n* Section 2`
              if line.startswith("*") and not line.startswith("*" * (ctx.level + 2)):
                break
              else:
                result = Part.parse(ctx.next_level())
                if isinstance(result, Error):
                  return result
                elif isinstance(result, Success):
                  parts.append(result.tree)
                  ctx = result.ctx.prev_level()
                  continue
                else:
                  assert False, "unexpected parse result of type " + str(type(result))
            else:
              break
          subsections = filter(lambda part: isinstance(part, Section), parts)
          if subsections:
            accumulated_max_grade = 0
            for subsection in subsections: accumulated_max_grade += subsection.max_grade
            if (max_grade != accumulated_max_grade): return Error(initial_ctx, message_invalid_section_max_grade(max_grade, accumulated_max_grade))
          return Success(ctx, Section(initial_ctx, level, name, grade, max_grade, parts))
        else:
          return Error(ctx, message_invalid_section_header(level, line))
      else:
        return Error(ctx, message_invalid_section_level("*" * expected_level, actual_level))
    else:
      return Error(ctx, message_unexpected_eof("Section"))
class Header(Part):
  def __init__(self, ctx, str):
    self.ctx = ctx
    self.str = str
  def __str__(self):
    return str(self.str) + ":"
  def fill(self):
    return self
  @parser("Header")
  def parse(ctx):
    if ctx.lines:
      line = ctx.lines[0].strip()
      if line.endswith(":"): return Success(ctx.next_line(), Header(ctx, line[:-1].strip()))
      else: return Error(ctx, message_invalid_line())
    else:
      return Error(ctx, message_unexpected_eof("Header"))
class Correction(Part):
  def __init__(self, ctx, penalty, explanation):
    self.ctx = ctx
    self.penalty = penalty
    self.explanation = explanation
  def __str__(self):
    return str(-1 * self.penalty) + ": " + str(self.explanation)
  def fill(self):
    return self
  @parser("Correction")
  def parse(ctx):
    if ctx.lines:
      line = ctx.lines[0].strip()
      assert line.startswith("-") or line.startswith("+")
      m = re.match("^([-|+]\d+)\w*:\w*(.*?)$", line)
      logger.info("matching " + line)
      logger.info("match result: " + str(m.groups() if m else None))
      if m:
        grade = int(m.groups()[0])
        penalty = -1 * grade
        explanation = m.groups()[1].strip()
        return Success(ctx.next_line(), Correction(ctx, penalty, explanation))
      else:
        return Error(ctx, message_invalid_correction(line))
    else:
      return Error(ctx, message_unexpected_eof("Correction"))

input_string = sys.stdin.read()
input_lines = input_string.strip().split("\n")
initial_ctx = Context(input_lines, input_lines, position = 1, level = 0)
result = Sheet.parse(initial_ctx)
if type(result) == Success:
  input_sheet = result.tree
  assert len(result.ctx.lines) == 0
  output_sheet = input_sheet.fill()
  print str(output_sheet)
  logger.info("Isograder terminating with a success...")
  sys.exit(0)
elif type(result) == Error:
  logger.critical(message_expected_error(result))
  logger.info("Isograder terminating with a parse error...")
  exit(1)
